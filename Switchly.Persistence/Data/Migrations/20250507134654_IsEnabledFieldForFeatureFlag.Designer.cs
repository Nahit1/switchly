// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Switchly.Persistence.Db;

#nullable disable

namespace Switchly.Persistence.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507134654_IsEnabledFieldForFeatureFlag")]
    partial class IsEnabledFieldForFeatureFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Key")
                        .IsUnique();

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlagEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeatureFlagEnvironmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureFlagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlagEnvironmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("RolloutPercentage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeatureFlagEnvironmentId");

                    b.HasIndex("FeatureFlagId");

                    b.HasIndex("FlagEnvironmentId");

                    b.ToTable("FeatureFlagEnvironments");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FlagEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FlagEnvironments");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.SegmentRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureFlagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RolloutPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureFlagId");

                    b.ToTable("SegmentRules");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlag", b =>
                {
                    b.HasOne("Switchly.Domain.Entities.Organization", "Organization")
                        .WithMany("FeatureFlags")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlagEnvironment", b =>
                {
                    b.HasOne("Switchly.Domain.Entities.FeatureFlagEnvironment", null)
                        .WithMany("FeatureFlagEnvironments")
                        .HasForeignKey("FeatureFlagEnvironmentId");

                    b.HasOne("Switchly.Domain.Entities.FeatureFlag", "FeatureFlag")
                        .WithMany("FeatureFlagEnvironments")
                        .HasForeignKey("FeatureFlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Switchly.Domain.Entities.FlagEnvironment", "FlagEnvironment")
                        .WithMany("FeatureFlagEnvironments")
                        .HasForeignKey("FlagEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureFlag");

                    b.Navigation("FlagEnvironment");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FlagEnvironment", b =>
                {
                    b.HasOne("Switchly.Domain.Entities.Organization", "Organization")
                        .WithMany("FlagEnvironments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.SegmentRule", b =>
                {
                    b.HasOne("Switchly.Domain.Entities.FeatureFlag", "FeatureFlag")
                        .WithMany("SegmentRules")
                        .HasForeignKey("FeatureFlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureFlag");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.User", b =>
                {
                    b.HasOne("Switchly.Domain.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlag", b =>
                {
                    b.Navigation("FeatureFlagEnvironments");

                    b.Navigation("SegmentRules");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FeatureFlagEnvironment", b =>
                {
                    b.Navigation("FeatureFlagEnvironments");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.FlagEnvironment", b =>
                {
                    b.Navigation("FeatureFlagEnvironments");
                });

            modelBuilder.Entity("Switchly.Domain.Entities.Organization", b =>
                {
                    b.Navigation("FeatureFlags");

                    b.Navigation("FlagEnvironments");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
