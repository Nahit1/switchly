using MassTransit;
using RedisWorker;
using StackExchange.Redis;
using RedisWorker.Consumers;
using Switchly.Application.Common.Interfaces;

var host = Host.CreateDefaultBuilder(args)
  .ConfigureServices((context, services) =>
  {
    services.AddSingleton<IRedisKeyProvider, RedisKeyProvider>();

    // Redis baÄŸlantÄ±sÄ±
    services.AddSingleton<IConnectionMultiplexer>(
      ConnectionMultiplexer.Connect("localhost,allowAdmin=true")); // Docker iÃ§indeysen "redis" olabilir

    // MassTransit + Consumer tanÄ±mÄ±
    services.AddMassTransit(x =>
    {
      x.AddConsumer<FeatureFlagEvaluatedConsumer>(); // ğŸŸ¢ Consumer'Ä± bildir

      x.UsingRabbitMq((ctx, cfg) =>
      {
        cfg.Host("rabbitmq://localhost", h =>
        {
          h.Username("guest");
          h.Password("guest");
        });

        // ğŸŸ¢ Exchange'e baÄŸlanan queue tanÄ±mÄ±
        cfg.ReceiveEndpoint("feature-flag-evaluated", e =>
        {
          e.ConfigureConsumer<FeatureFlagEvaluatedConsumer>(ctx); // ğŸŸ¢ MesajÄ± consumer'a yÃ¶nlendir
        });
      });
    });

    // Varsa Worker.cs iÃ§in servis tanÄ±mÄ± (zorunlu deÄŸil)
    services.AddHostedService<Worker>();
  })
  .Build();

await host.RunAsync();
